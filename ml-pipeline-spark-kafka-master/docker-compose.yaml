version: "3.7"
services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    expose:
      - "2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - kafka_zookeeper:/opt/zookeeper-3.6.1/data
    networks:
      kafkanet:
        ipv4_address: 172.28.0.11
  
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9093:9093'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093                              
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    volumes:
      - kafka_kafka:/opt/kafka_2.12-2.2.0/logs
    networks:
      kafkanet:
        ipv4_address: 172.28.0.12
    depends_on:
      - "zookeeper"
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      kafkanet:
        ipv4_address: 172.28.0.13
  
  streaming-api:
    image: streaming-api:latest  # Corrected indentation here
    container_name: streaming-api
    ports:
      - '8000:8000'
    networks:
      kafkanet:
        ipv4_address: 172.28.0.16
  
  spark-worker:
    container_name: spark-worker
    image: bitnami/spark:3.5
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      SPARK_MASTER_URL: spark://spark-master:7077
    networks:
      kafkanet:
        ipv4_address: 172.28.0.15
     
  spark-master:
    container_name: spark-master
    image: bitnami/spark:3.5
    command: /bin/bash -c "pip install streamlit matplotlib pandas pyspark==3.5.3 && bin/spark-class org.apache.spark.deploy.master.Master"
    ports:
      - "9090:8080"
      - "7077:7077"
      - "8501:8501"
    networks:
      kafkanet:
        ipv4_address: 172.28.0.14
    environment:
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
    volumes:
      - ./:/app

  


  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
    container_name: namenode
    volumes:
      - namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=hive
    env_file:
      - ./hadoop-hive.env
    ports:
      - "50070:50070"
    networks:
      kafkanet:
        ipv4_address: 172.28.0.20

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
    container_name: datanode
    volumes:
      - datanode:/hadoop/dfs/data
    env_file:
      - ./hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    ports:
      - "50075:50075"
    networks:
      kafkanet:
        ipv4_address: 172.28.0.21

  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    volumes:
      - ./api:/api
    env_file:
      - ./hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
    networks:
      kafkanet:
        ipv4_address: 172.28.0.18

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    env_file:
      - ./hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:50070 datanode:50075 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
    networks:
      kafkanet:
        ipv4_address: 172.28.0.17

  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    networks:
      kafkanet:
        ipv4_address: 172.28.0.22




  zookeeperr:
    container_name: zookeeperr
    image: zookeeper:3.5.10
    ports:
      - "2181:2181"
    environment:
      - ZOO_MY_ID=1
    networks:
      kafkanet:
        ipv4_address: 172.28.0.29


  postgres:
    container_name: postgres
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid
    networks:
      kafkanet:
        ipv4_address: 172.28.0.23
  coordinator:
    image: apache/druid:31.0.0
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    ports:
      - "8081:8081"
    command:
      - coordinator
    depends_on:
      - zookeeperr
      - postgres
    env_file:
      - environment.txt
    networks:
      kafkanet:
        ipv4_address: 172.28.0.24

  broker:
    image: apache/druid:31.0.0
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    ports:
      - "8082:8082"
    command:
      - broker
    depends_on:
      - zookeeperr
      - postgres
      - coordinator
    env_file:
      - environment.txt
    networks:
      kafkanet:
        ipv4_address: 172.28.0.25

  historical:
    image: apache/druid:31.0.0
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    ports:
      - "8083:8083"
    command:
      - historical
    depends_on: 
      - zookeeperr
      - postgres
      - coordinator
    env_file:
      - environment.txt
    networks:
      kafkanet:
        ipv4_address: 172.28.0.26

  middlemanager:
    image: apache/druid:31.0.0
    container_name: middlemanager
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    depends_on: 
      - zookeeperr
      - postgres
      - coordinator
    env_file:
      - environment.txt
    networks:
      kafkanet:
        ipv4_address: 172.28.0.27

  router:
    image: apache/druid:31.0.0
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    ports:
      - "8888:8888"
    command:
      - router
    depends_on: 
      - zookeeperr
      - postgres
      - coordinator
    env_file:
      - environment.txt
    networks:
      kafkanet:
        ipv4_address: 172.28.0.28








networks:
  kafkanet:
    name: kafkanet
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:
  kafka_zookeeper:
  kafka_kafka:
  namenode:
  datanode:
  broker_var:
  druid_shared:
  historical_var:
  coordinator_var:
  middle_var:
  router_var:
  metadata_data: